function GraphLayout = GraphLoadGraphLayoutPlain(Graph, FileName)
% the function reads the graph layout in plain text file format generated by GraphViz with -Tplain switch.
%
%
% Receieves:
%   Graph - graph - the graph structure used to generate the graph
%   FileName - string - the name of the file to read
%
%
% Returns:
%   GraphLayout - structure - the details necessary to plot the graph
%
% See Also:
%   ObjectCreateGraph,LoadGraph, GraphToGraphViz, GraphPlotGraphLayout
%
% Algorithm:
%   the format is specified at http://www.graphviz.org/doc/info/output.html#d:plain
% Example:
%{
    GraphLayout = GraphLoadGraphLayoutPlain(Graph, 'Graph.dot.plain')
%}

error(nargchk(2,2,nargin));
error(nargoutchk(0,1,nargout));

GraphLayout = [];
GraphLayout.Graph = [];
GraphLayout.Nodes = CreateEmptyNodesStruct(max(max(Graph.Data(:,1:2))));
GraphLayout.Edges= CreateEmptyEdgesStruct(size(Graph.Data,1));
GraphLayout.LayoutFileName = FileName;
GraphLayout.Figure = [];
if ~exist(GraphLayout.LayoutFileName,'file'), error('File ''%s'' not found',GraphLayout.LayoutFileName); end
hFile = fopen(GraphLayout.LayoutFileName, 'rt');
Proceed = true;
Line = fgetl(hFile);
while ~isnumeric(Line) && Proceed
    % parse the line:
    if ~isempty(Line)
        [~,~,~,~,~,~,splitstring] = regexp(Line,' ');
%         if isempty(FirstSpaceIndex), FirstSpaceIndex =numel(Line)+1; end
        LineType = splitstring{1};
        switch LineType
            case 'edge'
                GraphLayout = ParseEdge(GraphLayout, Graph, Line, splitstring);
            case 'node'
                GraphLayout = ParseNode( GraphLayout,  Line, splitstring);
            case 'stop'
                Proceed = false;
            case 'graph'
                values = str2double(splitstring(2:4));
                GraphLayout.Graph.Scale = values(1); 
                GraphLayout.Graph.Size = values(2:3); 
            otherwise
                warning('unsupported entry: ''%s'' in line ''%s'' ', LineType,Line);                
        end
        
    end
    
    Line = fgetl(hFile);
end
if Proceed, error('unexpected end of file ''%s''',GraphLayout.LayoutFileName); end

fclose(hFile);
end % GraphLoadGraphLayoutPlain
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function GraphLayout = ParseEdge(GraphLayout,Graph,Line, splitstring)
FromID = str2double(splitstring(2));
ToID = str2double(splitstring(3));
ID = find( GraphLayout.Edges.ID==0,1,'first');
GraphLayout.Edges.ID(ID) = ID; 
GraphLayout.Edges.From(ID) = FromID;
GraphLayout.Edges.To(ID) = ToID;
GraphLayout.Edges.Index(ID) = find(Graph.Data(:,1)==FromID & Graph.Data(:,2)==ToID,1,'first'); 
NumberOfPoints = str2double(splitstring(4));
GraphLayout.Edges.Spline{ID} = reshape(str2double( splitstring(5:5+2*NumberOfPoints-1)),[2  NumberOfPoints]);
        % assume no label
GraphLayout.Edges.Style{ID} = splitstring{5+2*NumberOfPoints};
GraphLayout.Edges.Color{ID} = splitstring{5+2*NumberOfPoints+1};
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Edges = CreateEmptyEdgesStruct(MaxEdgeID)
    Edges = [];
    Edges.ID = zeros(MaxEdgeID,1); 
    Edges.From = zeros(MaxEdgeID,1); 
    Edges.To  = zeros(MaxEdgeID,2); 
    Edges.Index = zeros(MaxEdgeID,1);
    Edges.Spline = cell(MaxEdgeID,1); 
        % assume no label
    Edges.Style = cell(MaxEdgeID,1);
    Edges.Color = cell(MaxEdgeID,1);
    Edges.Handles =  NaN*zeros(MaxEdgeID,1);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function GraphLayout = ParseNode(GraphLayout,Line, splitstring)
% [~,~,~,~,~,~,splitstring] = regexp(Line,' ');
ID = str2num(splitstring{2});
GraphLayout.Nodes.ID(ID) = ID; 
GraphLayout.Nodes.Position(ID,:) = str2double( splitstring(3:4)).';
GraphLayout.Nodes.Size(ID,:) = str2double( splitstring(5:6)).';
GraphLayout.Nodes.Label{ID} = splitstring{7};
GraphLayout.Nodes.Style{ID} = splitstring{8};
GraphLayout.Nodes.Shape{ID} = splitstring{9};
GraphLayout.Nodes.Color{ID} = splitstring{10};
GraphLayout.Nodes.FillColor{ID} = splitstring{11};
GraphLayout.Nodes.Lines{ID} = Line;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Nodes = CreateEmptyNodesStruct(MaxNodeID)
Nodes  = [];
Nodes.ID = zeros(MaxNodeID,1);
Nodes.Position = zeros(MaxNodeID,2);
Nodes.Size = zeros(MaxNodeID,2);
Nodes.Label = cell(MaxNodeID,1);
Nodes.Style = cell(MaxNodeID,1);
Nodes.Shape = cell(MaxNodeID,1);
Nodes.Color = cell(MaxNodeID,1);
Nodes.FillColor = cell(MaxNodeID,1);
Nodes.Lines =  cell(MaxNodeID,1);
Nodes.Handles =  NaN*zeros(MaxNodeID,1);
end